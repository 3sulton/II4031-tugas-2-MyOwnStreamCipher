
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Checkbutton


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"../img")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def App(screen=None):
    if (screen != None):
        screen.destroy()
    global window
    window = Tk()
    window.title("My Own Stream Cipher")
    window.geometry("900x600")
    window.configure(bg = "#F8EFD3")


    canvas = Canvas(
        window,
        bg = "#F8EFD3",
        height = 600,
        width = 900,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    # judul
    canvas.place(x = 0, y = 0)
    image_title = PhotoImage(
        file=relative_to_assets("title.png"))
    title = canvas.create_image(
        449.0,
        43.0,
        image=image_title
    )

    # navigation bar
    image_bar = PhotoImage(
        file=relative_to_assets("bar.png"))
    bar = canvas.create_image(
        95.0,
        305.0,
        image=image_bar
    )

    # input label
    image_input = PhotoImage(
        file=relative_to_assets("input.png"))
    input = canvas.create_image(
        105.0,
        100.0,
        image=image_input
    )

    # choose file button
    button_choose = PhotoImage(
        file=relative_to_assets("choose.png"))
    choose = Button(
        image=button_choose,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("choose clicked"),
        relief="flat"
    )
    # posisi tombol choose file
    choose.place(
        x=147.0,
        y=80.0,
        width=140.0,
        height=40.0
    )

    # kolom input
    entry_input_column = PhotoImage(
        file=relative_to_assets("input_column.png"))
    entry_bg_input_column = canvas.create_image(
        497.0,
        165.0,
        image=entry_input_column
    )
    # format kolom input
    entry_input = Text(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0
    )
    # posisi kolom input
    entry_input.place(
        x=147.0,
        y=130.0,
        width=700.0,
        height=68.0
    )

    # key label
    image_key = PhotoImage(
        file=relative_to_assets("key.png"))
    key = canvas.create_image(
        113.0,
        245.0,
        image=image_key
    )

    # key column
    entry_key_column = PhotoImage(
        file=relative_to_assets("key_column.png"))
    entry_bg_key_column = canvas.create_image(
        497.0,
        265.0,
        image=entry_key_column
    )
    # format kolom key
    entry_key = Text(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0
    )
    # posisi kolom key
    entry_key.place(
        x=147.0,
        y=230.0,
        width=700.0,
        height=68.0
    )

    # checkbox string format
    check = Checkbutton(
            window,
            anchor = "nw",
            bg = "#F8EFD3",
        )
    # posisi checkbox
    check.pack()
    check.place(
        x = 155.0,
        y = 311.0
    )

    # string format check
    image_string_format = PhotoImage(
        file=relative_to_assets("string_format.png"))
    string_foramt = canvas.create_image(
        268.0,
        324.0,
        image=image_string_format
    )

    # encrypt button
    button_encrypt = PhotoImage(
        file=relative_to_assets("encrypt.png"))
    encrypt = Button(
        image=button_encrypt,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("encrypt clicked"),
        relief="flat"
    )
    # posisi tombol encrypt
    encrypt.place(
        x=147.0,
        y=350.0,
        width=140.0,
        height=40.0
    )

    # decrypt button
    button_decrypt = PhotoImage(
        file=relative_to_assets("decrypt.png"))
    decrypt = Button(
        image=button_decrypt,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("decrypt clicked"),
        relief="flat"
    )
    # posisi tombol decrypt
    decrypt.place(
        x=324.0,
        y=350.0,
        width=140.0,
        height=40.0
    )

    # default message
    image_default_message = PhotoImage(
        file=relative_to_assets("default_message.png"))
    default_message = canvas.create_image(
        261.0,
        420.0,
        image=image_default_message
    )

    # output label
    image_output = PhotoImage(
        file=relative_to_assets("output.png"))
    output = canvas.create_image(
        96.0,
        445.0,
        image=image_output
    )

    # kolom output
    entry_output_column = PhotoImage(
        file=relative_to_assets("output_column.png"))
    entry_bg_output_column = canvas.create_image(
        497.0,
        465.0,
        image=entry_output_column
    )
    entry_output = Text(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0
    )
    entry_output.place(
        x=147.0,
        y=430.0,
        width=700.0,
        height=68.0
    )

    # download button
    button_download = PhotoImage(
        file=relative_to_assets("download.png"))
    download = Button(
        image=button_download,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("download clicked"),
        relief="flat"
    )
    download.place(
        x=147.0,
        y=510.0,
        width=140.0,
        height=40.0
    )

    image_credit = PhotoImage(
        file=relative_to_assets("credit.png"))
    credit = canvas.create_image(
        778.0,
        580.0,
        image=image_credit
    )
    window.resizable(False, False)
    window.mainloop()
if __name__ == "__main__":
    App()
